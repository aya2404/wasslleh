import express, { Request, Response } from 'express';
import axios from 'axios';

const router = express.Router();

// Load Gemini API key from environment variable
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  throw new Error('GEMINI_API_KEY is not set in environment variables');
}

// POST /api/gemini-smart-filter
router.post('/gemini-smart-filter', async (req: Request, res: Response) => {
  const { disability, jobs } = req.body;
  if (!disability || !jobs) {
    return res.status(400).json({ error: 'Missing disability or jobs' });
  }

  try {
    // Construct prompt for Gemini
    const prompt = `Recommend the most suitable jobs for a person with ${disability} disability from the following list: ${JSON.stringify(jobs)}. Return only the recommended jobs as an array.`;

    // Call Gemini API securely
    const response = await axios.post(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',
      {
        contents: [{ role: 'user', parts: [{ text: prompt }] }],
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'x-goog-api-key': GEMINI_API_KEY,
        },
      }
    );

    // Parse Gemini response
    const text = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    let recommendedJobs = [];
    try {
      recommendedJobs = JSON.parse(text);
    } catch {
      // Fallback: return raw text
      recommendedJobs = text;
    }

    res.json({ recommendedJobs });
  } catch (error: any) {
    console.error('Gemini API error:', error?.response?.data || error);
    res.status(500).json({ error: error.message, details: error?.response?.data });
  }
});

export default router;
